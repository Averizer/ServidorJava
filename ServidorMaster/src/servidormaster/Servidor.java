/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servidormaster;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JTextArea;
import javax.swing.Timer;
import javax.swing.plaf.basic.BasicSliderUI;
/**
 *
 * @author emili
 */
public class Servidor extends javax.swing.JFrame {
    public final static int SERVICE_PORT=10000;
    
      
    public Servidor() {
        conexion conn = new conexion();
        conn.conectar();
        conn.reset();
        String disponibles;
        disponibles = conn.disponibilidad();
        System.out.println(conn.conectado());
        conn.desconectar();
        initComponents();
        txtDisponibles.setText(disponibles);
    }
      
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        labelImagen = new javax.swing.JLabel();
        restart = new javax.swing.JButton();
        adjust = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisponibles = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Server status: Running");

        labelImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/libros-grande.jpg"))); // NOI18N

        restart.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        restart.setText("RESTART");
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });

        adjust.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        adjust.setText("CLOCK ADJUSTMENT");
        adjust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjustActionPerformed(evt);
            }
        });

        txtDisponibles.setColumns(20);
        txtDisponibles.setRows(5);
        jScrollPane1.setViewportView(txtDisponibles);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(175, 175, 175))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(adjust)
                        .addGap(272, 272, 272))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(restart)
                        .addGap(306, 306, 306))))
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(267, 267, 267))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 494, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(restart)
                .addGap(18, 18, 18)
                .addComponent(adjust)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        // TODO add your handling code here:
        conexion conn = new conexion();
        conn.conectar();
        conn.reset();
        String disponibles;
        disponibles = conn.disponibilidad();
        System.out.println(conn.conectado());
        conn.desconectar();
        txtDisponibles.setText(disponibles);
    }//GEN-LAST:event_restartActionPerformed

    private void adjustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjustActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_adjustActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing
    
    public void actionPerformed(ActionEvent ae){
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Servidor s = new Servidor();
        s.setVisible(true);
        try{
            // Instantiate a new DatagramSocket to receive responses from the client
            DatagramSocket serverSocket = new DatagramSocket(SERVICE_PORT);
            ArrayList<String> lista = new ArrayList<>();
            

            for(;;){
                
                
                /* Create buffers to hold sending and receiving data.
                It temporarily stores data in case of communication delays */
                byte[] receivingDataBuffer = new byte[1024];
                byte[] sendingDataBuffer = new byte[1024];
                
                /* Instantiate a UDP packet to store the 
                client data using the buffer for receiving data*/
                DatagramPacket inputPacket = new DatagramPacket(receivingDataBuffer, receivingDataBuffer.length);
                System.out.println("Waiting for a client to connect...");

                // Receive data from the client and store in inputPacket
                serverSocket.receive(inputPacket);

                // Printing out the client sent data
                String receivedData = new String(inputPacket.getData());
                System.out.println("ORDEN DEL CLIENTE: "+receivedData);
                
                if(receivedData.contains("INICIO")){
                    System.out.println("EJECUCION DE INICIO, CARGANDO LIBROS DISPONIBLES");
                    //AQUI SE PIDE LA LISTA DE LOS LIBROS Y SE REGRESA AL CLIENTE
                    String respuesta = "CARGANDO BASE DE DATOS";
                    conexion conn = new conexion();
                    conn.conectar();
                    String disponibles;
                    disponibles = conn.disponibilidad();
                    System.out.println(conn.conectado());
                    conn.desconectar();
                    s.txtDisponibles.setText(disponibles);
                    sendingDataBuffer = respuesta.toUpperCase().getBytes();

                }else if(receivedData.contains("ASK")){
                    //Pedir libros disponibles hacer random entre la lista y devolver nombre
                    //Con el nombre mostrar la imagen
                    conexion conn = new conexion();
                    conn.conectar();
                    lista = conn.dpp();
                    int random = lista.size();
                    if(random > 0){
                        Random rn = new Random();
                        String libro = lista.get(rn.nextInt(random));
                        System.out.println(conn.conectado());
                        System.out.println("LIBRO ELEGIDO: "+ libro);
                        //conn.prestamo();
                        conn.prestamo(libro);
                        String disponibles;
                        disponibles = conn.disponibilidad();
                        conn.desconectar();
                        s.txtDisponibles.setText(disponibles);
                        s.labelImagen.setIcon(new ImageIcon
                        ("C:\\Users\\emili\\Desktop\\ServidorJava\\ServidorMaster\\src\\img\\"+libro+".jpg"));
                        sendingDataBuffer = libro.toUpperCase().getBytes();
                    }else{
                        String libro = "AGOTADO";
                        sendingDataBuffer = libro.toUpperCase().getBytes();
                        conn.desconectar();
                        s.labelImagen.setIcon(new ImageIcon
                        ("C:\\Users\\emili\\Desktop\\ServidorJava\\ServidorMaster\\src\\img\\liibros-grande.jpg"));
                    }
                    
                    
                }else if(receivedData.contains("RESET")){
                    //Pedir libros disponibles hacer random entre la lista y devolver nombre
                    //Con el nombre mostrar la imagen
                    conexion conn = new conexion();
                    conn.conectar();
                    conn.reset();
                    String disponibles;
                    disponibles = conn.disponibilidad();
                    System.out.println(conn.conectado());
                    conn.desconectar();
                    s.txtDisponibles.setText(disponibles);
                    String libro = "OK";
                    sendingDataBuffer = libro.toUpperCase().getBytes();
                    
                    
                }   

                    // Obtain client's IP address and the port
                    InetAddress senderAddress = inputPacket.getAddress();
                    int senderPort = inputPacket.getPort();

                    // Create new UDP packet with data to send to the client
                    DatagramPacket outputPacket = new DatagramPacket(
                      sendingDataBuffer, sendingDataBuffer.length,
                      senderAddress,senderPort
                    );
                    sendingDataBuffer = null;
                    // Send the created packet to client
                    serverSocket.send(outputPacket);
                    // Close the socket connection
                    //serverSocket.close();
                }
            }catch (SocketException e){
              e.printStackTrace();
            } catch (IOException ex) {
              Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
          }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adjust;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelImagen;
    private javax.swing.JButton restart;
    private javax.swing.JTextArea txtDisponibles;
    // End of variables declaration//GEN-END:variables
}
