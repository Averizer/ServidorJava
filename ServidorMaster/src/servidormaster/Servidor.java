/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servidormaster;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.sql.Date;
import java.sql.SQLException;
import java.time.Clock;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JTextArea;
import javax.swing.Timer;
import javax.swing.plaf.basic.BasicSliderUI;
/**
 *
 * @author emili
 */
public class Servidor extends javax.swing.JFrame {
    public final static int SERVICE_PORT=10000;
    public final static String SERVICE_HOST="127.0.0.1";
    public final int portUTC = 5005;
    public final static String hostUTC="127.0.0.1";
    Timer hourUpdate;
    int DELAY = 2000;
    public DatagramSocket socketUTC = new DatagramSocket();
    public InetAddress IPAddress = InetAddress.getByName(hostUTC);
    
    public Servidor() throws IOException {
        
        conexion conn = new conexion();
        conn.conectar();
        conn.reset();
        String disponibles;
        disponibles = conn.disponibilidad();
        System.out.println(conn.conectado());
        conn.desconectar();
        initComponents();
        txtDisponibles.setText(disponibles);
        
        hourUpdate = new Timer(DELAY, new ActionListener(){
            
            @Override
            
            public void actionPerformed(ActionEvent e){
                byte[] getUTC = new byte[1024];
                String sentence = LocalDateTime.now().toString();
                String myHour = sentence.substring(11, sentence.length()-1);
                getUTC = myHour.getBytes();
                DatagramPacket packetUTC;
                packetUTC = new DatagramPacket(getUTC, getUTC.length, IPAddress, portUTC);
                LocalDateTime localDateTime = LocalDateTime.now();
                String tiempoLocal = localDateTime.toString().substring(10, localDateTime.toString().length());
                
                try {
                    socketUTC.send(packetUTC);
                    socketUTC.receive(packetUTC);
                    String receivedD = new String(packetUTC.getData());
                    System.out.println("recib√≠: " + receivedD +" de "+ packetUTC.getPort());
                } catch (IOException ex) {
                    Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
                }
                horaUTC.setText("L:"+tiempoLocal);
            }
        });
        hourUpdate.start();
    }
      
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelImagen = new javax.swing.JLabel();
        restart = new javax.swing.JButton();
        adjust = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisponibles = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        horaUTC = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        labelImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/libros-grande.jpg"))); // NOI18N

        restart.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        restart.setText("RESTART");
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });

        adjust.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        adjust.setText("CLOCK ADJUSTMENT");
        adjust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjustActionPerformed(evt);
            }
        });

        txtDisponibles.setColumns(20);
        txtDisponibles.setRows(5);
        jScrollPane1.setViewportView(txtDisponibles);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Server status: Running");

        horaUTC.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        horaUTC.setText("Hora UTC:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(adjust)
                                .addGap(41, 41, 41)
                                .addComponent(horaUTC, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(restart)))
                .addContainerGap(113, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(256, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addGap(193, 193, 193)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adjust)
                    .addComponent(horaUTC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addComponent(jLabel3)
                    .addContainerGap(401, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        // TODO add your handling code here:
        conexion conn = new conexion();
        conn.conectar();
        conn.reset();
        String disponibles;
        disponibles = conn.disponibilidad();
        System.out.println(conn.conectado());
        conn.desconectar();
        txtDisponibles.setText(disponibles);
        
        DatagramSocket respaldoSocket;
        try {
            respaldoSocket = new DatagramSocket();
            String ipreslpaldo = SERVICE_HOST;
            InetAddress ipRespaldo = InetAddress.getByName(ipreslpaldo);
            byte[] receivingDataBuffer2 = new byte[1024];
            byte[] sendingDataBuffer2 = new byte[1024];
            String sentence = "RESET";
            sendingDataBuffer2 = sentence.getBytes();
            DatagramPacket sendingPacket2 = new DatagramPacket(sendingDataBuffer2, sendingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
            respaldoSocket.send(sendingPacket2);
            DatagramPacket rec = new DatagramPacket(receivingDataBuffer2, receivingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
            respaldoSocket.receive(rec);
            respaldoSocket.close();
        } catch (SocketException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_restartActionPerformed

    private void adjustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjustActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_adjustActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing
    
    public void actionPerformed(ActionEvent ae){
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws SQLException, IOException {
        String libros = "/home/luis/Escritorio/ESCOM/"
            + "Distribuidos/P3/ServidorJava/ServidorMaster/src/img/";
        Servidor s = new Servidor();
        s.setVisible(true);
        try{
            // Instantiate a new DatagramSocket to receive responses from the client
            DatagramSocket serverSocket = new DatagramSocket(SERVICE_PORT);
            ArrayList<String> lista = new ArrayList<>();
            

            for(;;){
                
                
                /* Create buffers to hold sending and receiving data.
                It temporarily stores data in case of communication delays */
                byte[] receivingDataBuffer = new byte[1024];
                byte[] sendingDataBuffer = new byte[1024];
                
                /* Instantiate a UDP packet to store the 
                client data using the buffer for receiving data*/
                DatagramPacket inputPacket = new DatagramPacket(receivingDataBuffer, receivingDataBuffer.length);
                System.out.println("Waiting for a client to connect...");
                String horai = LocalDateTime.now(Clock.systemUTC()).toString();
                String horaInicio = horai.substring(11, horai.length()-1);
                // Receive data from the client and store in inputPacket
                serverSocket.receive(inputPacket);
                
                // Printing out the client sent data
                String receivedData = new String(inputPacket.getData());
                System.out.println("ORDEN DEL CLIENTE: "+receivedData);
                InetAddress ip = inputPacket.getAddress();
                System.out.println("LA DIRECCION ES: "+ ip.toString());
                if(receivedData.contains("INICIO")){
                    System.out.println("EJECUCION DE INICIO, CARGANDO LIBROS DISPONIBLES");
                    //AQUI SE PIDE LA LISTA DE LOS LIBROS Y SE REGRESA AL CLIENTE
                    String respuesta = "CARGANDO BASE DE DATOS";
                    conexion conn = new conexion();
                    conn.conectar();
                    String disponibles;
                    disponibles = conn.disponibilidad();
                    System.out.println(conn.conectado());
                    conn.desconectar();
                    s.txtDisponibles.setText(disponibles);
                    sendingDataBuffer = respuesta.toUpperCase().getBytes();
                    //-----------------REPLICADO----------------------
                    /*DatagramSocket respaldoSocket = new DatagramSocket();
                    String ipreslpaldo = SERVICE_HOST;
                    InetAddress ipRespaldo = InetAddress.getByName(ipreslpaldo);
                    byte[] receivingDataBuffer2 = new byte[1024];
                    byte[] sendingDataBuffer2 = new byte[1024];
                    String sentence = "INICIO";
                    sendingDataBuffer2 = sentence.getBytes();
                    DatagramPacket sendingPacket2 = new DatagramPacket(sendingDataBuffer2, sendingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
                    respaldoSocket.send(sendingPacket2);
                    DatagramPacket rec = new DatagramPacket(receivingDataBuffer2, receivingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
                    respaldoSocket.receive(rec);
                    respaldoSocket.close();*/
                }else if(receivedData.contains("ASK")){
                    //Pedir libros disponibles hacer random entre la lista y devolver nombre
                    //Con el nombre mostrar la imagen
                    conexion conn = new conexion();
                    conn.conectar();
                    lista = conn.dpp();
                    int random = lista.size();
                    
                    if(random > 0){
                        Random rn = new Random();
                        String libro = lista.get(rn.nextInt(random));
                        System.out.println(conn.conectado());
                        System.out.println("LIBRO ELEGIDO: "+ libro);
                        //conn.prestamo();
                        conn.prestamo(libro);
                        //conn.prestamo2(ip, libro, nombre);
                        String disponibles;
                        disponibles = conn.disponibilidad();
                        
                        s.txtDisponibles.setText(disponibles);
                        s.labelImagen.setIcon(new ImageIcon
                        (libros+libro+".jpg"));
                        sendingDataBuffer = libro.toUpperCase().getBytes();
                        
                        //-----------------REPLICADO----------------------
                       /* DatagramSocket respaldoSocket = new DatagramSocket();
                        String ipreslpaldo = "192.168.0.195";
                        InetAddress ipRespaldo = InetAddress.getByName(ipreslpaldo);
                        byte[] receivingDataBuffer2 = new byte[1024];
                        byte[] sendingDataBuffer2 = new byte[1024];
                        String sentence = "ASK -"+libro;
                        sendingDataBuffer2 = sentence.getBytes();
                        DatagramPacket sendingPacket2 = new DatagramPacket(sendingDataBuffer2, sendingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
                        respaldoSocket.send(sendingPacket2);
                        DatagramPacket rec = new DatagramPacket(receivingDataBuffer2, receivingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
                        respaldoSocket.receive(rec);
                        respaldoSocket.close();
                        String horaf = LocalDateTime.now(Clock.systemUTC()).toString();
                        String date = horaf.substring(0, 10);
                        String horaFin = horaf.substring(11, horaf.length()-1);
                        conn.savePedido(date, horaInicio, horaFin,ip.toString(),libro);
                        conn.desconectar(); */
                    }else{
                        String libro = "AGOTADO";
                        sendingDataBuffer = libro.toUpperCase().getBytes();
                        conn.desconectar();
                        s.labelImagen.setIcon(new ImageIcon
                        (libros+"liibros-grande.jpg"));
                        //-----------------REPLICADO----------------------
                        /*DatagramSocket respaldoSocket = new DatagramSocket();
                        String ipreslpaldo = "192.168.0.195";
                        InetAddress ipRespaldo = InetAddress.getByName(ipreslpaldo);
                        byte[] receivingDataBuffer2 = new byte[1024];
                        byte[] sendingDataBuffer2 = new byte[1024];
                        String sentence = "AGOTADO";
                        sendingDataBuffer2 = sentence.getBytes();
                        DatagramPacket sendingPacket2 = new DatagramPacket(sendingDataBuffer2, sendingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
                        respaldoSocket.send(sendingPacket2);
                        DatagramPacket rec = new DatagramPacket(receivingDataBuffer2, receivingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
                        respaldoSocket.receive(rec);
                        respaldoSocket.close();*/
                    }
                    
                    
                }else if(receivedData.contains("RESET")){
                    //Pedir libros disponibles hacer random entre la lista y devolver nombre
                    //Con el nombre mostrar la imagen
                    conexion conn = new conexion();
                    conn.conectar();
                    conn.reset();
                    String disponibles;
                    disponibles = conn.disponibilidad();
                    System.out.println(conn.conectado());
                    conn.desconectar();
                    s.txtDisponibles.setText(disponibles);
                    String libro = "OK";
                    sendingDataBuffer = libro.toUpperCase().getBytes();
                    //-----------------REPLICADO----------------------
                    /*DatagramSocket respaldoSocket = new DatagramSocket();
                    String ipreslpaldo = "192.168.0.195";
                    InetAddress ipRespaldo = InetAddress.getByName(ipreslpaldo);
                    byte[] receivingDataBuffer2 = new byte[1024];
                    byte[] sendingDataBuffer2 = new byte[1024];
                    String sentence = "RESET";
                    sendingDataBuffer2 = sentence.getBytes();
                    DatagramPacket sendingPacket2 = new DatagramPacket(sendingDataBuffer2, sendingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
                    respaldoSocket.send(sendingPacket2);
                    DatagramPacket rec = new DatagramPacket(receivingDataBuffer2, receivingDataBuffer2.length, ipRespaldo, SERVICE_PORT);
                    respaldoSocket.receive(rec);
                    respaldoSocket.close();*/
                    
                    
                }   

                    // Obtain client's IP address and the port
                    InetAddress senderAddress = inputPacket.getAddress();
                    int senderPort = inputPacket.getPort();

                    // Create new UDP packet with data to send to the client
                    DatagramPacket outputPacket = new DatagramPacket(
                      sendingDataBuffer, sendingDataBuffer.length,
                      senderAddress,senderPort
                    );
                    sendingDataBuffer = null;
                    // Send the created packet to client
                    serverSocket.send(outputPacket);
                    // Close the socket connection
                    //serverSocket.close();
                }
            }catch (SocketException e){
              e.printStackTrace();
            } catch (IOException ex) {
              Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
          }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adjust;
    private javax.swing.JLabel horaUTC;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelImagen;
    private javax.swing.JButton restart;
    private javax.swing.JTextArea txtDisponibles;
    // End of variables declaration//GEN-END:variables
}
